{"version":3,"sources":["components/Home.tsx","components/MenuToggle.tsx","components/MenuItem.tsx","components/Navigation.tsx","components/Navbar.tsx","components/use-dimensions.ts","components/ScrollToTop.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","className","Container","maxWidth","role","aria-label","strings","typeSpeed","Path","props","path","fill","strokeWidth","stroke","strokeLinecap","opacity","MenuToggle","toggle","onClick","width","height","viewBox","variants","closed","d","open","transition","duration","y","stiffness","velocity","MenuItem","item","a","whileHover","scale","whileTap","href","url","name","toLowerCase","toUpperCase","staggerChildren","delayChildren","staggerDirection","items","Navigation","ul","map","idx","key","sidebar","clipPath","type","restDelta","delay","damping","Navbar","useCycle","isOpen","toggleOpen","containerRef","useRef","ref","dimensions","useEffect","current","offsetWidth","offsetHeight","useDimensions","nav","initial","animate","custom","div","ScrollToTop","pathname","useLocation","React","window","scrollTo","App","basename","process","exact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f2c181ed.chunk.js","sourcesContent":["import * as React from 'react';\nimport Typed from 'react-typed';\n\nimport Container from '@material-ui/core/Container';\n\nexport const Home: React.FunctionComponent<{}> = () => {\n    return (\n        <main className=\"home\">\n            <Container className=\"portfolio-container\" maxWidth=\"md\">\n                <h1 className=\"home-title\">\n                    Hi, I'm Alex <span role=\"img\" aria-label=\"Waving Hand\">ðŸ‘‹</span>\n                </h1>\n                <Typed\n                    className=\"home-description\"\n                    strings={[\"I code and take photographs.\"]}\n                    typeSpeed={50}\n                    />\n            </Container>\n        </main>\n    );\n};","import * as React from \"react\";\nimport { motion } from \"framer-motion\";\n\nconst Path = (props: any) => (\n  <motion.path\n    fill=\"transparent\"\n    strokeWidth=\"3\"\n    stroke=\"#fff\"\n    strokeLinecap=\"round\"\n    opacity=\"0.87\"\n    {...props}\n  />\n);\n\nexport const MenuToggle = ({ toggle }: { toggle: any }) => (\n  <button onClick={toggle}>\n    <svg width=\"23\" height=\"23\" viewBox=\"0 0 23 23\">\n      <Path\n        variants={{\n          closed: { d: \"M 2 2.5 L 20 2.5\" },\n          open: { d: \"M 3 16.5 L 17 2.5\" }\n        }}\n      />\n      <Path\n        d=\"M 2 9.423 L 20 9.423\"\n        variants={{\n          closed: { opacity: 0.87 },\n          open: { opacity: 0 }\n        }}\n        transition={{ duration: 0.1 }}\n      />\n      <Path\n        variants={{\n          closed: { d: \"M 2 16.346 L 20 16.346\" },\n          open: { d: \"M 3 2.5 L 17 16.346\" }\n        }}\n      />\n    </svg>\n  </button>\n);\n","import * as React from \"react\";\nimport { motion } from \"framer-motion\";\n\nimport { NavigationItem } from './Navigation';\n\nconst variants = {\n  open: {\n    y: 0,\n    opacity: 1,\n    transition: {\n      y: { stiffness: 1000, velocity: -100 }\n    }\n  },\n  closed: {\n    y: 50,\n    opacity: 0,\n    transition: {\n      y: { stiffness: 1000 }\n    }\n  }\n};\n\nexport const MenuItem = ({ item }: { item: NavigationItem }) => {\n  return (\n    <li className=\"navbar-li\">\n      <motion.a\n        className=\"menu-item\"\n        variants={variants}\n        whileHover={{ scale: 1.1 }}\n        whileTap={{ scale: 0.95 }} \n        href={item.url || `/${item.name.toLowerCase()}`}>{item.name.toUpperCase()}\n        </motion.a>\n    </li>\n  );\n};\n","import * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { MenuItem } from \"./MenuItem\";\n\nconst variants = {\n  open: {\n    transition: { staggerChildren: 0.07, delayChildren: 0.2 }\n  },\n  closed: {\n    transition: { staggerChildren: 0.05, staggerDirection: -1 }\n  }\n};\n\nexport interface NavigationItem {\n  name: string;\n  url?: string;\n};\n\nconst items: NavigationItem[] = [\n  { name: \"Home\", url: '/' },\n  { name: \"About\" },\n  { name: \"Photography\" }\n];\n\nexport const Navigation = () => (\n  <motion.ul className=\"navbar-ul\" variants={variants}>\n    {items.map((item, idx) => (\n      <MenuItem item={item} key={idx} />\n    ))}\n  </motion.ul>\n);\n","import * as React from \"react\";\nimport { useRef } from \"react\";\nimport { motion, useCycle } from \"framer-motion\";\n\nimport { useDimensions } from \"./use-dimensions\";\nimport { MenuToggle } from \"./MenuToggle\";\nimport { Navigation } from \"./Navigation\";\n\nconst sidebar = {\n  open: (height = 2000) => ({\n    clipPath: `circle(${height * 2 + 200}px at 40px 40px)`,\n    transition: {\n      type: \"spring\",\n      stiffness: 20,\n      restDelta: 2\n    }\n  }),\n  closed: {\n    clipPath: \"circle(30px at 40px 40px)\",\n    transition: {\n      delay: 0.5,\n      type: \"spring\",\n      stiffness: 400,\n      damping: 40\n    }\n  }\n};\n\nexport const Navbar = () => {\n  const [isOpen, toggleOpen] = useCycle(false, true);\n  const containerRef = useRef(null);\n  const { height } = useDimensions(containerRef);\n\n  return (\n    <motion.nav\n      initial={false}\n      animate={isOpen ? \"open\" : \"closed\"}\n      custom={height}\n      ref={containerRef}\n    >\n      <motion.div className=\"background\" variants={sidebar} />\n      <Navigation />\n      <MenuToggle toggle={() => toggleOpen()} />\n    </motion.nav>\n  );\n};\n","import { useEffect, useRef } from \"react\";\n\n// Naive implementation - in reality would want to attach\n// a window or resize listener. Also use state/layoutEffect instead of ref/effect\n// if this is important to know on initial client render.\n// It would be safer to  return null for unmeasured states.\nexport const useDimensions = (ref: any) => {\n  const dimensions = useRef({ width: 0, height: 0 });\n\n  useEffect(() => {\n    dimensions.current.width = ref.current.offsetWidth;\n    dimensions.current.height = ref.current.offsetHeight;\n  }, []);\n\n  return dimensions.current;\n};\n","import * as React from 'react';\nimport { useLocation } from \"react-router-dom\";\n\nexport const ScrollToTop: React.FunctionComponent<{}> = () => {\n  const { pathname } = useLocation();\n\n  React.useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { Home } from \"./components/Home\";\nimport { About } from \"./components/About\";\nimport { Navbar } from \"./components/Navbar\";\nimport { Photography } from \"./components/Photography\";\nimport { Collections, Collection } from './components/Collection';\nimport { ScrollToTop } from './components/ScrollToTop';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <ScrollToTop />\n      <Navbar />\n      <Switch>\n        <Route exact path={process.env.PUBLIC_URL + \"/\"}>\n          <Home />\n        </Route>\n        {/* {Collections.map(item => (\n          <Route exact key={item.title} path={`/photography/${item.title.toLowerCase().split(' ').join('-')}`}>\n            <Collection {...item}/>\n          </Route>\n        ))}\n        <Route exact path=\"/photography\">\n            <Photography />\n        </Route>\n        <Route exact path=\"/about\">\n          <About />\n        </Route> */}\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}